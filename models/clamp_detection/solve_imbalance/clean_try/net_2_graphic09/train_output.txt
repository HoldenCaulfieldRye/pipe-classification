nohup: ignoring input
Initialized data layer 'data', producing 196608 outputs
Initialized data layer 'labels', producing 1 outputs
Initialized convolutional layer 'conv1', producing 63x63 48-channel output
Initialized max-pooling layer 'pool1', producing 31x31 48-channel output
Initialized cross-map response-normalization layer 'rnorm1', producing 31x31 48-channel output
Initialized convolutional layer 'conv2', producing 31x31 128-channel output
Initialized max-pooling layer 'pool2', producing 15x15 128-channel output
Initialized cross-map response-normalization layer 'rnorm2', producing 15x15 128-channel output
Initialized convolutional layer 'conv3', producing 15x15 192-channel output
Initialized convolutional layer 'conv4', producing 15x15 192-channel output
Initialized convolutional layer 'conv5', producing 15x15 128-channel output
Initialized max-pooling layer 'pool5', producing 7x7 128-channel output
Initialized fully-connected layer 'fc6', producing 4096 outputs
Initialized fully-connected layer 'fc7', producing 4096 outputs
Initialized fully-connected layer 'fc8', producing 2 outputs
Initialized softmax layer 'probs', producing 2 outputs
Initialized logistic regression cost 'logprob'
Initialized neuron layer 'conv1_neuron', producing 190512 outputs
Initialized neuron layer 'conv2_neuron', producing 123008 outputs
Initialized neuron layer 'conv3_neuron', producing 43200 outputs
Initialized neuron layer 'conv4_neuron', producing 43200 outputs
Initialized neuron layer 'conv5_neuron', producing 28800 outputs
Initialized neuron layer 'fc6_neuron', producing 4096 outputs
Initialized neuron layer 'fc7_neuron', producing 4096 outputs
=========================
Importing _ConvNet C++ module
=========================
Training ConvNet
Always write savepoints, regardless of test err improvement: 0     [DEFAULT]
Check gradients and quit?                                  : 0     [DEFAULT]
Compress checkpoints?                                      : 0     [DEFAULT]
Conserve GPU memory (slower)?                              : 0     [DEFAULT]
Convert given conv layers to unshared local                :       
Cropped DP: crop border size                               : 4     [DEFAULT]
Cropped DP: logreg layer name (for --multiview-test)       :       [DEFAULT]
Cropped DP: test on multiple patches?                      : 0     [DEFAULT]
Cropped Step: crop border step                             : 1     [DEFAULT]
Data batch range: testing                                  : 35-40 
Data batch range: training                                 : 1-34  
Data path                                                  : /data/ad6813/pipe-data/Bluebox/batches/clamp_detection 
Data provider                                              : basic-leaf256 
GPU override                                               : -1    [DEFAULT]
Layer definition file                                      : /homes/ad6813/Git/pipe-classification/models/clamp_detection/solve_imbalance/clean_try/net_2_graphic09/layers.cfg 
Layer parameter file                                       : /homes/ad6813/Git/pipe-classification/models/clamp_detection/solve_imbalance/clean_try/net_2_graphic09/params.cfg 
Load file                                                  :       [DEFAULT]
Maximum save file size (MB)                                : 0     [DEFAULT]
Minibatch size                                             : 128   [DEFAULT]
Number of GPUs                                             : 1     [DEFAULT]
Number of epochs                                           : 50000 [DEFAULT]
Save path                                                  : /data/ad6813/my-nets/saves 
Test and quit?                                             : 0     [DEFAULT]
Test on more than one batch at a time?                     : -1    
Test on one batch at a time?                               : 0     
Testing frequency                                          : 17    
Unshare weight matrices in given layers                    :       
=========================
Running on CUDA device(s) -2
Current time: Fri Jun 27 20:52:02 2014
Saving checkpoints to /data/ad6813/my-nets/saves/ConvNet__2014-06-27_20.51.58
=========================
1.1... logprob:  0.699081, 0.539062 (0.719 sec)
1.2... logprob:  0.690133, 0.398438 (0.715 sec)
1.3... logprob:  0.730490, 0.539062 (0.715 sec)
1.4... logprob:  1.002013, 0.531250 (0.715 sec)
1.5... logprob:  1.979197, 0.593750 (0.714 sec)
1.6... logprob:  1.801089, 0.414062 (0.715 sec)
1.7... logprob:  0.896450, 0.546875 (0.715 sec)
1.8... logprob:  1.529756, 0.500000 (0.715 sec)
1.9... logprob:  1.901989, 0.593750 (0.715 sec)
1.10... logprob:  1.761568, 0.406250 (0.715 sec)
1.11... logprob:  0.845319, 0.539062 (0.715 sec)
1.12... logprob:  1.178833, 0.429688 (0.715 sec)
1.13... logprob:  1.110888, 0.453125 (0.716 sec)
1.14... logprob:  1.219704, 0.453125 (0.715 sec)
1.15... logprob:  1.635326, 0.617188 (0.714 sec)
1.16... logprob:  2.135371, 0.453125 (0.715 sec)
1.17... logprob:  0.899097, 0.531250 (0.715 sec)
Traceback (most recent call last):
  File "/homes/ad6813/.local/bin/ccn-train", line 9, in <module>
    load_entry_point('noccn==0.1-dev', 'console_scripts', 'ccn-train')()
  File "/homes/ad6813/.local/lib/python2.7/site-packages/noccn-0.1_dev-py2.7.egg/noccn/train.py", line 81, in console
    run_model(ConvNet, 'train')
  File "/homes/ad6813/.local/lib/python2.7/site-packages/noccn-0.1_dev-py2.7.egg/noccn/script.py", line 111, in run_model
    model.start()
  File "/homes/ad6813/.local/lib/python2.7/site-packages/noccn-0.1_dev-py2.7.egg/noccn/train.py", line 62, in start
    self.train()
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/gpumodel.py", line 157, in train
    self.test_outputs += [self.get_test_error()]
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/gpumodel.py", line 226, in get_test_error
    next_data = self.get_next_batch(train=False)
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/gpumodel.py", line 181, in get_next_batch
    return self.parse_batch_data(dp.get_next_batch(), train=train)
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/convdata.py", line 192, in get_next_batch
    self.data_dic = self.get_batch(self.curr_batchnum)
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/data.py", line 85, in get_batch
    dic = unpickle(self.get_data_file_name(batch_num))
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/util.py", line 71, in unpickle
    raise UnpickleError("Path '%s' does not exist." % filename)
util.UnpickleError: Path '/data/ad6813/pipe-data/Bluebox/batches/clamp_detection/data_batch_35' does not exist.
nohup: ignoring input
Initialized data layer 'data', producing 196608 outputs
Initialized data layer 'labels', producing 1 outputs
Initialized convolutional layer 'conv1', producing 63x63 48-channel output
Initialized max-pooling layer 'pool1', producing 31x31 48-channel output
Initialized cross-map response-normalization layer 'rnorm1', producing 31x31 48-channel output
Initialized convolutional layer 'conv2', producing 31x31 128-channel output
Initialized max-pooling layer 'pool2', producing 15x15 128-channel output
Initialized cross-map response-normalization layer 'rnorm2', producing 15x15 128-channel output
Initialized convolutional layer 'conv3', producing 15x15 192-channel output
Initialized convolutional layer 'conv4', producing 15x15 192-channel output
Initialized convolutional layer 'conv5', producing 15x15 128-channel output
Initialized max-pooling layer 'pool5', producing 7x7 128-channel output
Initialized fully-connected layer 'fc6', producing 4096 outputs
Initialized fully-connected layer 'fc7', producing 4096 outputs
Initialized fully-connected layer 'fc8', producing 2 outputs
Initialized softmax layer 'probs', producing 2 outputs
Initialized logistic regression cost 'logprob'
Initialized neuron layer 'conv1_neuron', producing 190512 outputs
Initialized neuron layer 'conv2_neuron', producing 123008 outputs
Initialized neuron layer 'conv3_neuron', producing 43200 outputs
Initialized neuron layer 'conv4_neuron', producing 43200 outputs
Initialized neuron layer 'conv5_neuron', producing 28800 outputs
Initialized neuron layer 'fc6_neuron', producing 4096 outputs
Initialized neuron layer 'fc7_neuron', producing 4096 outputs
=========================
Importing _ConvNet C++ module
=========================
Training ConvNet
Always write savepoints, regardless of test err improvement: 0     [DEFAULT]
Check gradients and quit?                                  : 0     [DEFAULT]
Compress checkpoints?                                      : 0     [DEFAULT]
Conserve GPU memory (slower)?                              : 0     [DEFAULT]
Convert given conv layers to unshared local                :       
Cropped DP: crop border size                               : 4     [DEFAULT]
Cropped DP: logreg layer name (for --multiview-test)       :       [DEFAULT]
Cropped DP: test on multiple patches?                      : 0     [DEFAULT]
Cropped Step: crop border step                             : 1     [DEFAULT]
Data batch range: testing                                  : 35-40 
Data batch range: training                                 : 1-34  
Data path                                                  : /data/ad6813/pipe-data/Bluebox/batches/clamp_detection 
Data provider                                              : basic-leaf256 
GPU override                                               : -1    [DEFAULT]
Layer definition file                                      : /homes/ad6813/Git/pipe-classification/models/clamp_detection/solve_imbalance/clean_try/net_2_graphic09/layers.cfg 
Layer parameter file                                       : /homes/ad6813/Git/pipe-classification/models/clamp_detection/solve_imbalance/clean_try/net_2_graphic09/params.cfg 
Load file                                                  :       [DEFAULT]
Maximum save file size (MB)                                : 0     [DEFAULT]
Minibatch size                                             : 128   [DEFAULT]
Number of GPUs                                             : 1     [DEFAULT]
Number of epochs                                           : 50000 [DEFAULT]
Save path                                                  : /data/ad6813/my-nets/saves 
Test and quit?                                             : 0     [DEFAULT]
Test on more than one batch at a time?                     : -1    
Test on one batch at a time?                               : 0     
Testing frequency                                          : 17    
Unshare weight matrices in given layers                    :       
=========================
Running on CUDA device(s) -2
Current time: Fri Jun 27 20:57:43 2014
Saving checkpoints to /data/ad6813/my-nets/saves/ConvNet__2014-06-27_20.57.39
=========================
1.1... logprob:  0.699081, 0.539062 (0.651 sec)
1.2... logprob:  0.690133, 0.398438 (0.649 sec)
1.3... logprob:  0.730490, 0.539062 (0.648 sec)
1.4... logprob:  1.002013, 0.531250 (0.648 sec)
1.5... logprob:  1.979197, 0.593750 (0.648 sec)
1.6... logprob:  1.801089, 0.414062 (0.648 sec)
1.7... logprob:  0.896450, 0.546875 (0.648 sec)
1.8... logprob:  1.529756, 0.500000 (0.648 sec)
1.9... logprob:  1.901989, 0.593750 (0.648 sec)
1.10... logprob:  1.761568, 0.406250 (0.648 sec)
1.11... logprob:  0.845319, 0.539062 (0.649 sec)
1.12... logprob:  1.178833, 0.429688 (0.649 sec)
1.13... logprob:  1.110888, 0.453125 (0.649 sec)
1.14... logprob:  1.219704, 0.453125 (0.649 sec)
1.15... logprob:  1.635326, 0.617188 (0.649 sec)
1.16... logprob:  2.135371, 0.453125 (0.649 sec)
1.17... logprob:  0.899097, 0.531250 (0.651 sec)
Traceback (most recent call last):
  File "/homes/ad6813/.local/bin/ccn-train", line 9, in <module>
    load_entry_point('noccn==0.1-dev', 'console_scripts', 'ccn-train')()
  File "/homes/ad6813/.local/lib/python2.7/site-packages/noccn-0.1_dev-py2.7.egg/noccn/train.py", line 81, in console
    run_model(ConvNet, 'train')
  File "/homes/ad6813/.local/lib/python2.7/site-packages/noccn-0.1_dev-py2.7.egg/noccn/script.py", line 111, in run_model
    model.start()
  File "/homes/ad6813/.local/lib/python2.7/site-packages/noccn-0.1_dev-py2.7.egg/noccn/train.py", line 62, in start
    self.train()
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/gpumodel.py", line 157, in train
    self.test_outputs += [self.get_test_error()]
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/gpumodel.py", line 226, in get_test_error
    next_data = self.get_next_batch(train=False)
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/gpumodel.py", line 181, in get_next_batch
    return self.parse_batch_data(dp.get_next_batch(), train=train)
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/convdata.py", line 192, in get_next_batch
    self.data_dic = self.get_batch(self.curr_batchnum)
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/data.py", line 85, in get_batch
    dic = unpickle(self.get_data_file_name(batch_num))
  File "/homes/ad6813/Git/pipe-classification/cuda_convnet/util.py", line 71, in unpickle
    raise UnpickleError("Path '%s' does not exist." % filename)
util.UnpickleError: Path '/data/ad6813/pipe-data/Bluebox/batches/clamp_detection/data_batch_35' does not exist.
